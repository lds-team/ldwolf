package bingo.com.screen.editmessagescreen;

import android.database.Cursor;
import android.os.Bundle;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Spanned;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import android.widget.SimpleCursorAdapter;
import android.widget.Spinner;
import android.widget.Toast;

import bingo.com.R;
import bingo.com.base.BaseFragment;
import bingo.com.enumtype.TypeMessage;
import bingo.com.helperdb.ContactDBHelper;
import bingo.com.helperdb.MessageDBHelper;
import bingo.com.helperdb.db.ContactDatabase;
import bingo.com.helperdb.db.MessageDatabase;
import bingo.com.model.ChooseMessage;
import bingo.com.model.ResultReturnModel;
import bingo.com.screen.editmessagescreen.adapter.EditMessageAdapter;
import bingo.com.utils.Formats;
import bingo.com.utils.LoaderSQLite;
import bingo.com.utils.StatisticControlImport;
import bingo.com.utils.Utils;
import bingo.com.utils.Validate;
import butterknife.Bind;
import butterknife.OnClick;
import butterknife.OnItemSelected;

/**
 * Created by kazinguyen on 6/14/17.
 */
public class EditMessageFragment extends BaseFragment<EditMessageFragment> implements View.OnClickListener {

    public static final String TAG = "EditMessageFragment";

    @Bind(R.id.editmessage_downmessage)
    RadioGroup mCheckedDownMessage;

    @Bind(R.id.editmessage_spin)
    Spinner mListCustomer;

    @Bind(R.id.editmessage_list)
    RecyclerView list;

    @Bind(R.id.editmessage_reload)
    Button reload;

    @Bind(R.id.editmessage_linear)
    LinearLayout editButton;

    @Bind(R.id.editmessage_textmess)
    EditText textMessage;

    TypeMessage typeMessage;

    private EditMessageAdapter adapter;

    private String phoneSelected;
    private String nameSelected;

    private boolean isChuNhanSo;

    private boolean isEditMode;

    private boolean hasReload;

    @Override
    public String initTag() {
        return TAG;
    }

    @Override
    public String screenNane() {
        return "Edit Message";
    }

    @Override
    public View onCreateFragmentView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        registerObs(this);
        return inflater.inflate(R.layout.fragment_editmessage, container, false);
    }

    @Override
    public void onViewFragmentCreated(View view, Bundle savedInstanceState) {
        initListCustom();
        initListMessage();

        typeMessage = TypeMessage.SMS;
    }

    private void initListCustom() {
        SimpleCursorAdapter adapter = new SimpleCursorAdapter(
                context,
                android.R.layout.simple_spinner_dropdown_item,
                ContactDBHelper.getAlls(),
                new String[]{ContactDatabase.NAME},
                new int[]{android.R.id.text1}, 0);

        mListCustomer.setAdapter(adapter);
        mListCustomer.setDropDownVerticalOffset(120);
        mListCustomer.setSelection(0);
    }

    private void initListMessage() {
        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity().getApplicationContext());
        list.setLayoutManager(layoutManager);

        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(list.getContext(),
                layoutManager.getOrientation());
        list.addItemDecoration(dividerItemDecoration);

        adapter = new EditMessageAdapter(context, getErrorMessage(), textMessage, mListCustomer);
        list.setAdapter(adapter);
    }

    private Cursor getErrorMessage() {
        return MessageDBHelper.getCursorStattisticNoAnalyze();
    }

    @OnClick(R.id.editmessage_reload)
    public void reloadDataCustomer() {

        if (phoneSelected != null)
        {
            MessageDBHelper.deleteAnalyzeMessageByDay(phoneSelected, getCurrenConfigDate());

            MessageDBHelper.loadMessageSync(phoneSelected, typeMessage);

            adapter.swapCursor(
                    /*TempleMessageHelper.getMessageByPhoneWithDate(phoneSelected, typeMessage, getCurrenConfigDate())*/
                    MessageDBHelper.getCursorStattisticNoAnalyze(phoneSelected)
            );

            /*CommonTask.AsyncSingleThread.get().execute(new Runnable() {
                @Override
                public void run() {
                    TempleMessageHelper.syncToMainMessageDb(phoneSelected, typeMessage, getCurrenConfigDate());
                }
            }).clean();*/

            hasReload = true;
        }
    }

    @Override
    public EditMessageFragment instance() {
        return this;
    }

    @OnClick({R.id.editmessage_edit, R.id.editmessage_down, R.id.editmessage_down_sent, R.id.editmessage_down_inbox, R.id.editmessage_editmes, R.id.editmessage_addmes})
    @Override
    public void onClick(View v) {
        switch (v.getId())
        {
            case R.id.editmessage_edit:
                typeMessage = TypeMessage.SMS;
                setTypeView(true);
                break;

            case R.id.editmessage_down:
                if (mCheckedDownMessage.getCheckedRadioButtonId() == R.id.editmessage_down_sent)
                    typeMessage = TypeMessage.SENT;
                else
                    typeMessage = TypeMessage.RECEIVED;

                setTypeView(false);
                break;

            case R.id.editmessage_down_inbox:
                typeMessage = TypeMessage.RECEIVED;
                break;

            case R.id.editmessage_down_sent:
                typeMessage = TypeMessage.SENT;
                break;

            case R.id.editmessage_addmes:
                addMessage(textMessage.getText().toString());
                break;

            case R.id.editmessage_editmes:
                updateMessage(textMessage.getText().toString());
                break;

            default:break;
        }
    }

    private void addMessage(final String mes) {
        if (TextUtils.isEmpty(mes) || phoneSelected == null)
            return;

        if (isChuNhanSo)
        {
            startingAddMessage(TypeMessage.SENT, mes);
        }
        else
        {
            startingAddMessage(TypeMessage.RECEIVED, mes);
        }

        textMessage.setText("");
    }

    private void startingAddMessage(TypeMessage type, String mes) {
        final long time = Long.parseLong(Utils.getTimeWithCurrentConfigDate());

        MessageDBHelper.addMessage(new ChooseMessage(
                nameSelected,
                phoneSelected,
                String.valueOf(time),
                mes,
                type.name()
        ));

        ResultReturnModel[] results = StatisticControlImport.getResultTodayAndYesterday(context.getApplicationContext());
        LoaderSQLite.startForceAnalyzing(context, nameSelected, phoneSelected, mes, time, type.name(), results);

        Toast.makeText(getActivity(), "Đã thêm vào tin nhắn " + type.name(), Toast.LENGTH_LONG).show();
    }

    private void updateMessage(String mes) {
        ChooseMessage itemSelect = adapter.chooseMessage;

        if (itemSelect != null && !TextUtils.isEmpty(mes))
        {
            Log.d(TAG, "updateMessage: " + itemSelect.getPhone());

            //TODO
            String error = Validate.canAnalyze(mes);
            if (error != null)
            {
                Spanned last = Formats.formatStringError(mes, error);

                textMessage.setText(last);
                Toast.makeText(getActivity(), "Tin lỗi.", Toast.LENGTH_LONG).show();
            }
            else
            {
                int row = MessageDBHelper.updateContent(itemSelect.getPhone(), itemSelect.getTime(), mes);

                if (row != 0 && adapter.clickable)
                {
                    adapter.setClickable(false);

                    textMessage.setText("");

                    ResultReturnModel[] results = StatisticControlImport.getResultTodayAndYesterday(context.getApplicationContext());
                    LoaderSQLite.startForceAnalyzing(context, itemSelect.getName(), itemSelect.getPhone(), mes, Long.parseLong(itemSelect.getTime()), itemSelect.getType(), results);
                }
                else
                {
                    Toast.makeText(getActivity(), "Xảy ra lỗi khi update tin nhắn.", Toast.LENGTH_LONG).show();
                }
            }
        }
    }

    private void setTypeView(boolean isEdit) {
        if (isEdit)
        {
            mCheckedDownMessage.setVisibility(View.GONE);
            reload.setVisibility(View.GONE);
            editButton.setVisibility(View.VISIBLE);
            textMessage.setVisibility(View.VISIBLE);
        }
        else
        {
            mCheckedDownMessage.setVisibility(View.VISIBLE);
            reload.setVisibility(View.VISIBLE);
            editButton.setVisibility(View.GONE);
            textMessage.setVisibility(View.GONE);
        }

        isEditMode = isEdit;
    }

    @OnItemSelected(R.id.editmessage_spin)
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        boolean hasChange = (phoneSelected != null);

        phoneSelected = ((Cursor) mListCustomer.getSelectedItem()).getString(((Cursor) mListCustomer.getSelectedItem()).getColumnIndex(MessageDatabase.PHONE));
        nameSelected = ((Cursor) mListCustomer.getSelectedItem()).getString(((Cursor) mListCustomer.getSelectedItem()).getColumnIndex(MessageDatabase.NAME));
        isChuNhanSo = ((Cursor) mListCustomer.getSelectedItem()).getString(((Cursor) mListCustomer.getSelectedItem()).getColumnIndex(MessageDatabase.TYPE)).equals(ContactDatabase.TYPE_CHU_NHAN_SO);

        if (hasChange && isEditMode)
        {
            adapter.swapCursor(
                    MessageDBHelper.getCursorStattisticNoAnalyze(phoneSelected)
            );
        }
    }

    @Override
    public void update() {
        if (!adapter.clickable)
        {
            adapter.setClickable(true);

            //TODO
            /*String error = MessageDBHelper.getError(phoneUpdating, timeUpdating);
            if (TextUtils.isEmpty(error))
            {*/
                textMessage.setText("");
                Toast.makeText(getActivity(), "Đã Sửa tin.", Toast.LENGTH_LONG).show();
            /*}
            else
            {
                Spanned last = Formats.formatStringError(messageUpdating, error);

                textMessage.setText(last);
                Toast.makeText(getActivity(), "Tin lỗi.", Toast.LENGTH_LONG).show();
            }*/
        }

        if (hasReload)
        {
            adapter.swapCursor(
                    MessageDBHelper.getCursorStattisticNoAnalyze(phoneSelected)
            );
        }
        else
        {
            adapter.swapCursor(
                    getErrorMessage()
            );
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();

        unRegisterObs(this);
    }
}

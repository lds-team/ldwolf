package com.bingo.common.utils;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.bingo.analyze.ExtractObject;

public class DauDit {
	public static ExtractObject getDauDuoi(String syntax) {
		ExtractObject extractObject = null;
		boolean isSyntax = syntax.matches(".*(dau|dit|duoi)\\s*[0-9\\s]+.*x[0-9]+\\s*(k|d)");
		if (isSyntax) {
			String regexDau = ".*dau\\s*([0-9]{1}).*";
			extractObject = Utils.extractUnitPrice(syntax);
			extractObject.Numbers = new ArrayList<>();
			
			Matcher matcherDau = Pattern.compile(regexDau).matcher(syntax);
			while (matcherDau.find()) {
				String num = matcherDau.group(1).trim();
				extractObject.Numbers.addAll(layDau(num));
			}
			
			String regexDit = ".*(dit|duoi)\\s*([0-9]{1}).*";
			Matcher matcherDit = Pattern.compile(regexDit).matcher(syntax);
			while (matcherDit.find()) {
				String num = matcherDit.group(2);
				extractObject.Numbers.addAll(layDuoi(num));
			}
			
			boolean isDe = syntax.matches(".*de.*x[0-9]+\\s*k|.*de.*x[0-9]+\\s*d");
			if(isDe){
				extractObject.Type = "de";
			}else{
				boolean isLo = syntax.matches(".*lo.*x[0-9]+\\s*k|.*lo.*x[0-9]+\\s*d");
				if(isLo){
					extractObject.Type = "lo";
				}else{
					extractObject.Type = "Unknow";
				}
			}
			
		}
		
		return extractObject;
	}
	
	protected static ArrayList<String> layDau(String number) {

		ArrayList<String> result = new ArrayList<String>();
		if (number.trim().equals(""))
			return result;
		if (number.trim().length() > 1 && number.trim().indexOf(" ") < 0) {
			result.add(number);
		} else {

			String[] arr = number.split(" ");
			for (String iNumber : arr) {
				if (iNumber.trim().equals(""))
					continue;
				for (int i = 0; i < 10; i++) {

					result.add(iNumber + "" + i);

				}
			}
		}

		return result;
	}
	
	protected static ArrayList<String> layDuoi(String number) {

		ArrayList<String> result = new ArrayList<String>();
		if (number.trim().equals(""))
			return result;
		if (number.trim().length() > 1 && number.trim().indexOf(" ") < 0) {
			result.add(number);
		} else {

			String[] arr = number.split(" ");
			for (String iNumber : arr) {
				if (iNumber.trim().equals(""))
					continue;
				for (int i = 0; i < 10; i++) {

					result.add(i + "" + iNumber);

				}
			}
		}

		return result;
	}
}
